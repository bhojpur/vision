// Code generated by MockGen. DO NOT EDIT.
// Source: ml.go

package mocks

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	engine "github.com/bhojpur/vision/pkg/engine"
)

// MockNeuralNet is a mock of NeuralNet interface.
type MockNeuralNet struct {
	ctrl     *gomock.Controller
	recorder *MockNeuralNetMockRecorder
}

// MockNeuralNetMockRecorder is the mock recorder for MockNeuralNet.
type MockNeuralNetMockRecorder struct {
	mock *MockNeuralNet
}

// NewMockNeuralNet creates a new mock instance.
func NewMockNeuralNet(ctrl *gomock.Controller) *MockNeuralNet {
	mock := &MockNeuralNet{ctrl: ctrl}
	mock.recorder = &MockNeuralNetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNeuralNet) EXPECT() *MockNeuralNetMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNeuralNet) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNeuralNetMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNeuralNet)(nil).Close))
}

// ForwardLayers mocks base method.
func (m *MockNeuralNet) ForwardLayers(outBlobNames []string) []engine.Mat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardLayers", outBlobNames)
	ret0, _ := ret[0].([]engine.Mat)
	return ret0
}

// ForwardLayers indicates an expected call of ForwardLayers.
func (mr *MockNeuralNetMockRecorder) ForwardLayers(outBlobNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardLayers", reflect.TypeOf((*MockNeuralNet)(nil).ForwardLayers), outBlobNames)
}

// GetLayer mocks base method.
func (m *MockNeuralNet) GetLayer(id int) engine.Layer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayer", id)
	ret0, _ := ret[0].(engine.Layer)
	return ret0
}

// GetLayer indicates an expected call of GetLayer.
func (mr *MockNeuralNetMockRecorder) GetLayer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayer", reflect.TypeOf((*MockNeuralNet)(nil).GetLayer), id)
}

// GetUnconnectedOutLayers mocks base method.
func (m *MockNeuralNet) GetUnconnectedOutLayers() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnconnectedOutLayers")
	ret0, _ := ret[0].([]int)
	return ret0
}

// GetUnconnectedOutLayers indicates an expected call of GetUnconnectedOutLayers.
func (mr *MockNeuralNetMockRecorder) GetUnconnectedOutLayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnconnectedOutLayers", reflect.TypeOf((*MockNeuralNet)(nil).GetUnconnectedOutLayers))
}

// SetInput mocks base method.
func (m *MockNeuralNet) SetInput(blob engine.Mat, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInput", blob, name)
}

// SetInput indicates an expected call of SetInput.
func (mr *MockNeuralNetMockRecorder) SetInput(blob, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInput", reflect.TypeOf((*MockNeuralNet)(nil).SetInput), blob, name)
}

// SetPreferableBackend mocks base method.
func (m *MockNeuralNet) SetPreferableBackend(backend engine.NetBackendType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPreferableBackend", backend)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPreferableBackend indicates an expected call of SetPreferableBackend.
func (mr *MockNeuralNetMockRecorder) SetPreferableBackend(backend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreferableBackend", reflect.TypeOf((*MockNeuralNet)(nil).SetPreferableBackend), backend)
}

// SetPreferableTarget mocks base method.
func (m *MockNeuralNet) SetPreferableTarget(target engine.NetTargetType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPreferableTarget", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPreferableTarget indicates an expected call of SetPreferableTarget.
func (mr *MockNeuralNetMockRecorder) SetPreferableTarget(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreferableTarget", reflect.TypeOf((*MockNeuralNet)(nil).SetPreferableTarget), target)
}